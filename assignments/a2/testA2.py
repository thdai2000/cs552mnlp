
import numpy as numpy
from sa import *
from shortcut import *
from transformers import RobertaTokenizer
import numpy as np

def hello_A2():
  print('Hello A2!')

def test_compute_metrics(compute):
    predictions = [0, 1, 0, 1, 0, 0, 0, 0]
    gold_labels = [1, 1, 1, 0, 0, 0, 0, 1]
    assert (compute(predictions, gold_labels)[0]==np.array([[3., 1.], [3., 1.]])).all(), 'compute_metric wrong answer ❌'
    assert compute(predictions, gold_labels)[1]==0.6, 'compute_metric wrong answer ❌'
    assert compute(predictions, gold_labels)[2]==0.3333333333333333, 'compute_metric wrong answer ❌'
    print('compute_metric test correct ✅')

def test_SADataset(dataset):
    assert dataset.pad_token=='<pad>', 'SADataset wrong pad token ❌'
    assert dataset.pad_id==1, 'SADataset wrong pad token id ❌'
    assert len(dataset)==1600, 'SADataset wrong sample number/length ❌'
    sample_0 = \
    {'ids': [0, 3732, 354, 1040, 21, 11385, 4, 1437, 318, 24, 21, 678, 7, 731, 24, 795, 87, 65, 999, 939, 74, 33, 4, 1437, 38, 524, 41, 20137, 10746, 8, 2738, 42, 1040, 62, 71, 127, 3795, 56, 5335, 24, 31, 10, 1441, 4, 1437, 38, 1166, 457, 9, 24, 6, 3606, 31, 10, 19344, 5, 1445, 86, 6, 8, 172, 300, 7, 5, 233, 59, 5, 1291, 5, 508, 76, 793, 2143, 56, 19, 10, 2357, 76, 793, 313, 8, 939, 6474, 42, 1040, 15, 668, 4, 1437, 509, 540, 5375, 11, 5, 232, 734, 7254, 75, 3844, 110, 418, 4, 38, 2813, 939, 56, 5, 86, 1240, 2600, 42, 1040, 124, 98, 939, 115, 304, 24, 13, 357, 6216, 4, 1437, 8640, 354, 1040, 14260, 127, 301, 2], 'label': 1}
    assert dataset[0]==sample_0, 'SADataset wrong sample ids/label ❌'
    collate_5_0 = \
    np.array([[    0,  3732,   354,  1040,    21, 11385,     4,  1437,   318,
          24,    21,   678,     7,   731,    24,   795,    87,    65,
         999,   939,    74,    33,     4,  1437,    38,   524,    41,
       20137, 10746,     8,  2738,    42,  1040,    62,    71,   127,
        3795,    56,  5335,    24,    31,    10,  1441,     4,  1437,
          38,  1166,   457,     9,    24,     6,  3606,    31,    10,
       19344,     5,  1445,    86,     6,     8,   172,   300,     7,
           5,   233,    59,     5,  1291,     5,   508,    76,   793,
        2143,    56,    19,    10,  2357,    76,   793,   313,     8,
         939,  6474,    42,  1040,    15,   668,     4,  1437,   509,
         540,  5375,    11,     5,   232,   734,  7254,    75,  3844,
         110,   418,     4,    38,  2813,   939,    56,     5,    86,
        1240,  2600,    42,  1040,   124,    98,   939,   115,   304,
          24,    13,   357,  6216,     4,  1437,  8640,   354,  1040,
       14260,   127,   301,     2], [    0,   100,   101,     7,   304,     5,  1645,  6173,    77,
        4906,  2799,     6,   941,  5439,    13, 35628, 22981,    59,
       46519,   352,  5211,  1964,     6,    61,  2333,  2982,   257,
        4216,   162,    31,    10,  4230,     4,  1437,   407,    38,
         904,    42,  1551,    14,  3640,  1142,     5,  7347,     9,
          42,   173,   111,    38,   303,    24, 41283,     6,  1403,
          12, 20017,     8,  1403,    12,  2028,   922, 13907,     6,
        1982,    30,    10,   621,    19,   410,    50,   117, 17805,
           6,   941,    13,     5,    82,    37,  2471,  1023,  1626,
           4,   286,  1246,     6,    39, 22910,     9,     5,   284,
       18931,  1302, 12956, 42500,     8, 11541,    13,  1683,     8,
       23387,   268,     7,     5,    22, 42098,  4291,   113, 11909,
       10705,     9,     5,   232,     4,   152,    22,  5785,    13,
        1683,   113,  6328,  1328,     5,  1040,    21,   182,  7018,
        1988, 21954,     7,     2], [    0,  3732,   354,  1040,    21, 11385,     4,  1437,   318,
          24,    21,   678,     7,   731,    24,   795,    87,    65,
         999,   939,    74,    33,     4,  1437,    38,   524,    41,
       20137, 10746,     8,  2738,    42,  1040,    62,    71,   127,
        3795,    56,  5335,    24,    31,    10,  1441,     4,  1437,
          38,  1166,   457,     9,    24,     6,  3606,    31,    10,
       19344,     5,  1445,    86,     6,     8,   172,   300,     7,
           5,   233,    59,     5,  1291,     5,   508,    76,   793,
        2143,    56,    19,    10,  2357,    76,   793,   313,     8,
         939,  6474,    42,  1040,    15,   668,     4,  1437,   509,
         540,  5375,    11,     5,   232,   734,  7254,    75,  3844,
         110,   418,     4,    38,  2813,   939,    56,     5,    86,
        1240,  2600,    42,  1040,   124,    98,   939,   115,   304,
          24,    13,   357,  6216,     4,  1437,  8640,   354,  1040,
       14260,   127,   301,     2], [    0,   100,   437,    45,   686,    54,    18,  2410,   209,
        6173,     6,    53,    38,  1166,  2851,   405,  7469,    71,
        2851,   405,  7469,    71,  2851,   405,  7469,     6,    19,
          10,   319,     9, 15868,  2342,  5865,     4,   287,  7037,
         543,  1142,     7,  6136,  2632,    50,  2007,   743,     4,
         653,    18,    22,   506, 34029,   113,    59,    14,   116,
          20,  2410,  2496,     8,  1383,    95,   399,    75,  3041,
           4,  6871,   282,    75,   588,     4,    38,  1266,     6,
          11,    65,  2810,     6,    79,   888,  2939,     5,  1385,
          22, 28777,   139,    60,    25,    11,     6,    22,  7939,
         162,  1137,    47,   402,     6, 13182,   139,    72,   653,
          32,    52,    11,    22, 21136, 10046,  1917,  9918,   282,
          75,   185,     5,  1040,  3640,    71,    14,     4, 12178,
        1099,     4,     2,     1,     1,     1,     1,     1,     1,
           1,     1,     1,     1], [    0,   100,  2738,    62,     5,    78,  1040,    11,    42,
         651,    36,   133, 15889,   241, 11176,  2456,    43,   716,
       15430,    15,    63, 18805,     8,    21,   314,  5568,   223,
       39724,  4567,     4,  3180,     6,     5,   801,    13,     5,
         651,  2551,    98,   739,    14,    38,   439,   789,     8,
        1166,    42,   200,    65,   350,     6,   129,     7,    28,
         190,   540, 44141,    19,     5,  3468,     4,   152,    16,
          10,  8309, 12123,     6,     8,   143, 19298,    32,  5578,
           7,  1166,     5,  3834,   625, 42506,     9,   296,  4130,
          16,  8414,   645,     6, 36485,    65,  2649,    66,     9,
          70, 26841,     7,   375,  1061,     4,  2223,   734,    15,
         617,  6077,     6,  2085,    24,   630,    75,   948,     6,
         187,  2563,   932,    64,     8,    40,  1369,    11,    42,
         651,     6,     8,   274,  1891,   242,   965,    75,    70,
          14,  2509,    11,     2]])
    collate_5_1 = np.array([1, 1, 1, 1, 1])
    assert (dataset.collate_fn(dataset[:5])[0].numpy()==collate_5_0).all() and \
    (dataset.collate_fn(dataset[:5])[1].numpy()==collate_5_1).all(), 'SADataset wrong padding or collate_fn ❌'
    collate_5_1_dec = ['positive', 'negative']
    assert dataset.decode_class(np.array([0, 1]))==collate_5_1_dec, 'SADataset wrong decode_class ❌'
    print('SADataset test correct ✅')

def test_get_synonyms(get_synonyms):
    ans = get_synonyms('task')
    print('The synonyms for the word "task" are: ', ans)
